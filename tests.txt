/Library/Developer/CommandLineTools/usr/bin/make -C impls/python3 step7_quote.py
make[1]: Nothing to be done for `step7_quote.py'.
(call STEP_TEST_FILES,python3,step7): impls/tests/step7_quote.mal
----------------------------------------------
Testing test^python3^step7; step file: impls/python3/step7_quote.py, test file: tests/step7_quote.mal
Running: env STEP=step7_quote MAL_IMPL=js ../../runtest.py  --deferrable --optional   ../tests/step7_quote.mal -- ../python3/run
Testing cons function
TEST: '(cons 1 (list))' -> ['',(1)] -> SUCCESS
TEST: '(cons 1 (list 2))' -> ['',(1 2)] -> SUCCESS
TEST: '(cons 1 (list 2 3))' -> ['',(1 2 3)] -> SUCCESS
TEST: '(cons (list 1) (list 2 3))' -> ['',((1) 2 3)] -> SUCCESS
TEST: '(def! a (list 2 3))' -> ['',] -> SUCCESS (result ignored)
TEST: '(cons 1 a)' -> ['',(1 2 3)] -> SUCCESS
TEST: 'a' -> ['',(2 3)] -> SUCCESS
Testing concat function
TEST: '(concat)' -> ['',()] -> SUCCESS
TEST: '(concat (list 1 2))' -> ['',(1 2)] -> SUCCESS
TEST: '(concat (list 1 2) (list 3 4))' -> ['',(1 2 3 4)] -> SUCCESS
TEST: '(concat (list 1 2) (list 3 4) (list 5 6))' -> ['',(1 2 3 4 5 6)] -> SUCCESS
TEST: '(concat (concat))' -> ['',()] -> SUCCESS
TEST: '(concat (list) (list))' -> ['',()] -> SUCCESS
TEST: '(= () (concat))' -> ['',true] -> SUCCESS
TEST: '(def! a (list 1 2))' -> ['',] -> SUCCESS (result ignored)
TEST: '(def! b (list 3 4))' -> ['',] -> SUCCESS (result ignored)
TEST: '(concat a b (list 5 6))' -> ['',(1 2 3 4 5 6)] -> SUCCESS
TEST: 'a' -> ['',(1 2)] -> SUCCESS
TEST: 'b' -> ['',(3 4)] -> SUCCESS
Testing regular quote
TEST: '(quote 7)' -> ['',7] -> SUCCESS
TEST: '(quote (1 2 3))' -> ['',(1 2 3)] -> SUCCESS
TEST: '(quote (1 2 (3 4)))' -> ['',(1 2 (3 4))] -> SUCCESS
Testing simple quasiquote
TEST: '(quasiquote nil)' -> ['',nil] -> SUCCESS
TEST: '(quasiquote 7)' -> ['',7] -> SUCCESS
TEST: '(quasiquote a)' -> ['',a] -> SUCCESS
TEST: '(quasiquote {"a" b})' -> ['',{"a" b}] -> SUCCESS
Testing quasiquote with lists
TEST: '(quasiquote ())' -> ['',()] -> SUCCESS
TEST: '(quasiquote (1 2 3))' -> ['',(1 2 3)] -> SUCCESS
TEST: '(quasiquote (a))' -> ['',(a)] -> SUCCESS
TEST: '(quasiquote (1 2 (3 4)))' -> ['',(1 2 (3 4))] -> SUCCESS
TEST: '(quasiquote (nil))' -> ['',(nil)] -> SUCCESS
TEST: '(quasiquote (1 ()))' -> ['',(1 ())] -> SUCCESS
TEST: '(quasiquote (() 1))' -> ['',(() 1)] -> SUCCESS
TEST: '(quasiquote (1 () 2))' -> ['',(1 () 2)] -> SUCCESS
TEST: '(quasiquote (()))' -> ['',(())] -> SUCCESS
(quasiquote (f () g (h) i (j k) l))
=>(f () g (h) i (j k) l)
Testing unquote
TEST: '(quasiquote (unquote 7))' -> ['',7] -> SUCCESS
TEST: '(def! a 8)' -> ['',8] -> SUCCESS
TEST: '(quasiquote a)' -> ['',a] -> SUCCESS
TEST: '(quasiquote (unquote a))' -> ['',8] -> SUCCESS
TEST: '(quasiquote (1 a 3))' -> ['',(1 a 3)] -> SUCCESS
TEST: '(quasiquote (1 (unquote a) 3))' -> ['',(1 8 3)] -> SUCCESS
TEST: '(def! b (quote (1 "b" "d")))' -> ['',(1 "b" "d")] -> SUCCESS
TEST: '(quasiquote (1 b 3))' -> ['',(1 b 3)] -> SUCCESS
TEST: '(quasiquote (1 (unquote b) 3))' -> ['',(1 (1 "b" "d") 3)] -> SUCCESS
TEST: '(quasiquote ((unquote 1) (unquote 2)))' -> ['',(1 2)] -> SUCCESS
Quasiquote and environments
TEST: '(let* (x 0) (quasiquote (unquote x)))' -> ['',0] -> SUCCESS
Testing splice-unquote
TEST: '(def! c (quote (1 "b" "d")))' -> ['',(1 "b" "d")] -> SUCCESS
TEST: '(quasiquote (1 c 3))' -> ['',(1 c 3)] -> SUCCESS
TEST: '(quasiquote (1 (splice-unquote c) 3))' -> ['',(1 1 "b" "d" 3)] -> SUCCESS
TEST: '(quasiquote (1 (splice-unquote c)))' -> ['',(1 1 "b" "d")] -> SUCCESS
TEST: '(quasiquote ((splice-unquote c) 2))' -> ['',(1 "b" "d" 2)] -> SUCCESS
TEST: '(quasiquote ((splice-unquote c) (splice-unquote c)))' -> ['',(1 "b" "d" 1 "b" "d")] -> SUCCESS
Testing symbol equality
TEST: '(= (quote abc) (quote abc))' -> ['',true] -> SUCCESS
TEST: '(= (quote abc) (quote abcd))' -> ['',false] -> SUCCESS
TEST: '(= (quote abc) "abc")' -> ['',false] -> SUCCESS
TEST: '(= "abc" (quote abc))' -> ['',false] -> SUCCESS
TEST: '(= "abc" (str (quote abc)))' -> ['',true] -> SUCCESS
TEST: '(= (quote abc) nil)' -> ['',false] -> SUCCESS
TEST: '(= nil (quote abc))' -> ['',false] -> SUCCESS

-------- Deferrable Functionality --------
Testing ' (quote) reader macro
TEST: "'7" -> ['',7] -> SUCCESS
TEST: "'(1 2 3)" -> ['',(1 2 3)] -> SUCCESS
TEST: "'(1 2 (3 4))" -> ['',(1 2 (3 4))] -> SUCCESS
Testing cons and concat with vectors
TEST: '(cons 1 [])' -> ['',(1)] -> SUCCESS
TEST: '(cons [1] [2 3])' -> ['',([1] 2 3)] -> SUCCESS
TEST: '(cons 1 [2 3])' -> ['',(1 2 3)] -> SUCCESS
TEST: '(concat [1 2] (list 3 4) [5 6])' -> ['',(1 2 3 4 5 6)] -> SUCCESS
TEST: '(concat [1 2])' -> ['',(1 2)] -> SUCCESS

-------- Optional Functionality --------
Testing ` (quasiquote) reader macro
TEST: '`7' -> ['',7] -> SUCCESS
TEST: '`(1 2 3)' -> ['',(1 2 3)] -> SUCCESS
TEST: '`(1 2 (3 4))' -> ['',(1 2 (3 4))] -> SUCCESS
TEST: '`(nil)' -> ['',(nil)] -> SUCCESS
Testing ~ (unquote) reader macro
TEST: '`~7' -> ['',7] -> SUCCESS
TEST: '(def! a 8)' -> ['',8] -> SUCCESS
TEST: '`(1 ~a 3)' -> ['',(1 8 3)] -> SUCCESS
TEST: '(def! b \'(1 "b" "d"))' -> ['',(1 "b" "d")] -> SUCCESS
TEST: '`(1 b 3)' -> ['',(1 b 3)] -> SUCCESS
TEST: '`(1 ~b 3)' -> ['',(1 (1 "b" "d") 3)] -> SUCCESS
Testing ~@ (splice-unquote) reader macro
TEST: '(def! c \'(1 "b" "d"))' -> ['',(1 "b" "d")] -> SUCCESS
TEST: '`(1 c 3)' -> ['',(1 c 3)] -> SUCCESS
TEST: '`(1 ~@c 3)' -> ['',(1 1 "b" "d" 3)] -> SUCCESS
Testing vec function
TEST: '(vec (list))' -> ['',[]] -> SUCCESS
TEST: '(vec (list 1))' -> ['',[1]] -> SUCCESS
TEST: '(vec (list 1 2))' -> ['',[1 2]] -> SUCCESS
TEST: '(vec [])' -> ['',[]] -> SUCCESS
TEST: '(vec [1 2])' -> ['',[1 2]] -> SUCCESS
Testing that vec does not mutate the original list
TEST: '(def! a (list 1 2))' -> ['',] -> SUCCESS (result ignored)
TEST: '(vec a)' -> ['',[1 2]] -> SUCCESS
TEST: 'a' -> ['',(1 2)] -> SUCCESS
Test quine
TEST: '((fn* (q) (quasiquote ((unquote q) (quote (unquote q))))) (quote (fn* (q) (quasiquote ((unquote q) (quote (unquote q)))))))' -> ['',((fn* (q) (quasiquote ((unquote q) (quote (unquote q))))) (quote (fn* (q) (quasiquote ((unquote q) (quote (unquote q)))))))] -> SUCCESS
Testing quasiquote with vectors
TEST: '(quasiquote [])' -> ['',[]] -> SUCCESS
TEST: '(quasiquote [[]])' -> ['',[[]]] -> SUCCESS
TEST: '(quasiquote [()])' -> ['',[()]] -> SUCCESS
TEST: '(quasiquote ([]))' -> ['',([])] -> SUCCESS
TEST: '(def! a 8)' -> ['',8] -> SUCCESS
TEST: '`[1 a 3]' -> ['',[1 a 3]] -> SUCCESS
TEST: '(quasiquote [a [] b [c] d [e f] g])' -> ['',[a [] b [c] d [e f] g]] -> SUCCESS
Testing unquote with vectors
TEST: '`[~a]' -> ['',[8]] -> SUCCESS
TEST: '`[(~a)]' -> ['',[(8)]] -> SUCCESS
TEST: '`([~a])' -> ['',([8])] -> SUCCESS
TEST: '`[a ~a a]' -> ['',[a 8 a]] -> SUCCESS
TEST: '`([a ~a a])' -> ['',([a 8 a])] -> SUCCESS
TEST: '`[(a ~a a)]' -> ['',[(a 8 a)]] -> SUCCESS
Testing splice-unquote with vectors
TEST: '(def! c \'(1 "b" "d"))' -> ['',(1 "b" "d")] -> SUCCESS
TEST: '`[~@c]' -> ['',[1 "b" "d"]] -> SUCCESS
TEST: '`[(~@c)]' -> ['',[(1 "b" "d")]] -> SUCCESS
TEST: '`([~@c])' -> ['',([1 "b" "d"])] -> SUCCESS
TEST: '`[1 ~@c 3]' -> ['',[1 1 "b" "d" 3]] -> SUCCESS
TEST: '`([1 ~@c 3])' -> ['',([1 1 "b" "d" 3])] -> SUCCESS
TEST: '`[(1 ~@c 3)]' -> ['',[(1 1 "b" "d" 3)]] -> SUCCESS
Misplaced unquote or splice-unquote
TEST: '`(0 unquote)' -> ['',(0 unquote)] -> SUCCESS
TEST: '`(0 splice-unquote)' -> ['',(0 splice-unquote)] -> SUCCESS
TEST: '`[unquote 0]' -> ['',[unquote 0]] -> SUCCESS
TEST: '`[splice-unquote 0]' -> ['',[splice-unquote 0]] -> SUCCESS
Debugging quasiquote
TEST: '(quasiquoteexpand nil)' -> ['',nil] -> SUCCESS
TEST: '(quasiquoteexpand 7)' -> ['',7] -> SUCCESS
TEST: '(quasiquoteexpand a)' -> ['',(quote a)] -> SUCCESS
TEST: '(quasiquoteexpand {"a" b})' -> ['',(quote {"a" b})] -> SUCCESS
TEST: '(quasiquoteexpand ())' -> ['',()] -> SUCCESS
TEST: '(quasiquoteexpand (1 2 3))' -> ['',(cons 1 (cons 2 (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (a))' -> ['',(cons (quote a) ())] -> SUCCESS
TEST: '(quasiquoteexpand (1 2 (3 4)))' -> ['',(cons 1 (cons 2 (cons (cons 3 (cons 4 ())) ())))] -> SUCCESS
TEST: '(quasiquoteexpand (nil))' -> ['',(cons nil ())] -> SUCCESS
TEST: '(quasiquoteexpand (1 ()))' -> ['',(cons 1 (cons () ()))] -> SUCCESS
TEST: '(quasiquoteexpand (() 1))' -> ['',(cons () (cons 1 ()))] -> SUCCESS
TEST: '(quasiquoteexpand (1 () 2))' -> ['',(cons 1 (cons () (cons 2 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (()))' -> ['',(cons () ())] -> SUCCESS
TEST: '(quasiquoteexpand (f () g (h) i (j k) l))' -> ['',(cons (quote f) (cons () (cons (quote g) (cons (cons (quote h) ()) (cons (quote i) (cons (cons (quote j) (cons (quote k) ())) (cons (quote l) ())))))))] -> SUCCESS
TEST: '(quasiquoteexpand (unquote 7))' -> ['',7] -> SUCCESS
TEST: '(quasiquoteexpand a)' -> ['',(quote a)] -> SUCCESS
TEST: '(quasiquoteexpand (unquote a))' -> ['',a] -> SUCCESS
TEST: '(quasiquoteexpand (1 a 3))' -> ['',(cons 1 (cons (quote a) (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 (unquote a) 3))' -> ['',(cons 1 (cons a (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 b 3))' -> ['',(cons 1 (cons (quote b) (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 (unquote b) 3))' -> ['',(cons 1 (cons b (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand ((unquote 1) (unquote 2)))' -> ['',(cons 1 (cons 2 ()))] -> SUCCESS
TEST: '(quasiquoteexpand (a (splice-unquote (b c)) d))' -> ['',(cons (quote a) (concat (b c) (cons (quote d) ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 c 3))' -> ['',(cons 1 (cons (quote c) (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 (splice-unquote c) 3))' -> ['',(cons 1 (concat c (cons 3 ())))] -> SUCCESS
TEST: '(quasiquoteexpand (1 (splice-unquote c)))' -> ['',(cons 1 (concat c ()))] -> SUCCESS
TEST: '(quasiquoteexpand ((splice-unquote c) 2))' -> ['',(concat c (cons 2 ()))] -> SUCCESS
TEST: '(quasiquoteexpand ((splice-unquote c) (splice-unquote c)))' -> ['',(concat c (concat c ()))] -> SUCCESS
TEST: '(quasiquoteexpand [])' -> ['',(vec ())] -> SUCCESS
TEST: '(quasiquoteexpand [[]])' -> ['',(vec (cons (vec ()) ()))] -> SUCCESS
TEST: '(quasiquoteexpand [()])' -> ['',(vec (cons () ()))] -> SUCCESS
TEST: '(quasiquoteexpand ([]))' -> ['',(cons (vec ()) ())] -> SUCCESS
TEST: '(quasiquoteexpand [1 a 3])' -> ['',(vec (cons 1 (cons (quote a) (cons 3 ()))))] -> SUCCESS
TEST: '(quasiquoteexpand [a [] b [c] d [e f] g])' -> ['',(vec (cons (quote a) (cons (vec ()) (cons (quote b) (cons (vec (cons (quote c) ())) (cons (quote d) (cons (vec (cons (quote e) (cons (quote f) ()))) (cons (quote g) ()))))))))] -> SUCCESS

TEST RESULTS (for ../tests/step7_quote.mal):
    0: soft failing tests
    0: failing tests
  147: passing tests
  147: total tests

