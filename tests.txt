/Library/Developer/CommandLineTools/usr/bin/make -C impls/python3 step6_file.py
make[1]: Nothing to be done for `step6_file.py'.
(call STEP_TEST_FILES,python3,step6): impls/tests/step6_file.mal
----------------------------------------------
Testing test^python3^step6; step file: impls/python3/step6_file.py, test file: tests/step6_file.mal
Running: env STEP=step6_file MAL_IMPL=js ../../runtest.py  --deferrable --optional   ../tests/step6_file.mal -- ../python3/run

Testing that (do (do)) not broken by TCO
TEST: '(do (do 1 2))' -> ['',2] -> SUCCESS

Testing read-string, eval and slurp
TEST: '(read-string "(1 2 (3 4) nil)")' -> ['',(1 2 (3 4) nil)] -> SUCCESS
TEST: '(= nil (read-string "nil"))' -> ['',true] -> SUCCESS
TEST: '(read-string "(+ 2 3)")' -> ['',(+ 2 3)] -> SUCCESS
TEST: '(read-string "\\"\\n\\"")' -> ['',"\n"] -> SUCCESS
TEST: '(read-string "7 ;; comment")' -> ['',7] -> SUCCESS
TEST: '(read-string ";; comment")' -> ['',] -> SUCCESS (result ignored)
TEST: '(eval (read-string "(+ 2 3)"))' -> ['',5] -> SUCCESS
TEST: '(slurp "../tests/test.txt")' -> ['',"A line of text\n"] -> SUCCESS
TEST: '(slurp "../tests/test.txt")' -> ['',"A line of text\n"] -> SUCCESS
Testing load-file
TEST: '(load-file "../tests/inc.mal")' -> ['',nil] -> SUCCESS
TEST: '(inc1 7)' -> ['',8] -> SUCCESS
TEST: '(inc2 7)' -> ['',9] -> SUCCESS
TEST: '(inc3 9)' -> ['',12] -> SUCCESS

Testing atoms
TEST: '(def! inc3 (fn* (a) (+ 3 a)))' -> ['',] -> SUCCESS (result ignored)
TEST: '(def! a (atom 2))' -> ['',(atom 2)] -> SUCCESS
TEST: '(atom? a)' -> ['',true] -> SUCCESS
TEST: '(atom? 1)' -> ['',false] -> SUCCESS
TEST: '(deref a)' -> ['',2] -> SUCCESS
TEST: '(reset! a 3)' -> ['',3] -> SUCCESS
TEST: '(deref a)' -> ['',3] -> SUCCESS
TEST: '(swap! a inc3)' -> ['',6] -> SUCCESS
TEST: '(deref a)' -> ['',6] -> SUCCESS
TEST: '(swap! a (fn* (a) a))' -> ['',6] -> SUCCESS
TEST: '(swap! a (fn* (a) (* 2 a)))' -> ['',12] -> SUCCESS
TEST: '(swap! a (fn* (a b) (* a b)) 10)' -> ['',120] -> SUCCESS
TEST: '(swap! a + 3)' -> ['',123] -> SUCCESS
Testing swap!/closure interaction
TEST: '(def! inc-it (fn* (a) (+ 1 a)))' -> ['',] -> SUCCESS (result ignored)
TEST: '(def! atm (atom 7))' -> ['',] -> SUCCESS (result ignored)
TEST: '(def! f (fn* () (swap! atm inc-it)))' -> ['',] -> SUCCESS (result ignored)
TEST: '(f)' -> ['',8] -> SUCCESS
TEST: '(f)' -> ['',9] -> SUCCESS
Testing whether closures can retain atoms
TEST: '(def! g (let* (atm (atom 0)) (fn* () (deref atm))))' -> ['',] -> SUCCESS (result ignored)
TEST: '(def! atm (atom 1))' -> ['',] -> SUCCESS (result ignored)
TEST: '(g)' -> ['',0] -> SUCCESS

-------- Deferrable Functionality --------
Testing reading of large files
TEST: '(load-file "../tests/computations.mal")' -> ['',nil] -> SUCCESS
TEST: '(sumdown 2)' -> ['',3] -> SUCCESS
TEST: '(fib 2)' -> ['',1] -> SUCCESS
Testing `@` reader macro (short for `deref`)
TEST: '(def! atm (atom 9))' -> ['',] -> SUCCESS (result ignored)
TEST: '@atm' -> ['',9] -> SUCCESS
Testing that vector params not broken by TCO
TEST: '(def! g (fn* [] 78))' -> ['',] -> SUCCESS (result ignored)
TEST: '(g)' -> ['',78] -> SUCCESS
TEST: '(def! g (fn* [a] (+ a 78)))' -> ['',] -> SUCCESS (result ignored)
TEST: '(g 3)' -> ['',81] -> SUCCESS

Testing that *ARGV* exists and is an empty list
TEST: '(list? *ARGV*)' -> ['',true] -> SUCCESS
TEST: '*ARGV*' -> ['',()] -> SUCCESS

Testing that eval sets aa in root scope, and that it is found in nested scope
TEST: '(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))' -> ['',7] -> SUCCESS

-------- Optional Functionality --------
Testing comments in a file
TEST: '(load-file "../tests/incB.mal")' -> ['',nil] -> SUCCESS
TEST: '(inc4 7)' -> ['',11] -> SUCCESS
TEST: '(inc5 7)' -> ['',12] -> SUCCESS
Testing map literal across multiple lines in a file
TEST: '(load-file "../tests/incC.mal")' -> ['',nil] -> SUCCESS
TEST: 'mymap' -> ['',{"a" 1}] -> SUCCESS
Checking that eval does not use local environments.
TEST: '(def! a 1)' -> ['',1] -> SUCCESS
TEST: '(let* (a 2) (eval (read-string "a")))' -> ['',1] -> SUCCESS
Non alphanumeric characters in comments in read-string
TEST: '(read-string "1;!")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;\\"")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;#")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;$")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;%")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;\'")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;\\\\")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;\\\\\\\\")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;\\\\\\\\\\\\")' -> ['',1] -> SUCCESS
TEST: '(read-string "1;`")' -> ['',1] -> SUCCESS
TEST: '(read-string "1; &()*+,-./:;<=>?@[]^_{|}~")' -> ['',1] -> SUCCESS

TEST RESULTS (for ../tests/step6_file.mal):
    0: soft failing tests
    0: failing tests
   65: passing tests
   65: total tests

----------------------------------------------
Testing ARGV of test^python3^step6; step file: impls/python3/step6_file.py
Running: env STEP=step6_file MAL_IMPL=js ../tests/run_argv_test.sh ../python3/run 
Passed all *ARGV* tests

